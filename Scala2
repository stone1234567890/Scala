package com.cisco.scala

import java.util.Date

object Function {
  def main(args: Array[String]): Unit = {
    /**
      * 1.方法定义
      *   1)方法体中最后返回值可以使用return，如果使用了return，那么方法体的返回值类型一定要指定
      *   2)如果方法体中没有return,默认将方法体中最后一行计算的结果当做返回值返回，方法体返回值可以省略，会自动推断返回值的类型
      *   3)定义方法传入的参数一定要指定类型
      *   4)方法的方法体如果可以一行搞定，那么方法体的{}可以省略
      *   5)如果定义方法的时候，省略了方法名称和方法体之间的等号=，那么无论方法体最后一行计算的结果是什么，都会被丢弃
      * @param a
      * @param b
      * @return
      */


    //定义常量或者变量用val或者var,也可以用下面的这种方式进行定义
//    def max(a:Int,b:Int):Int=if(a>b) a else b
    //定义函数max，最后返回一个大值
//    def max(a:Int,b:Int): Int ={
//      if(a>b) a else b
//      if(a>b){
//         a
//
//      }else{
//         b
//      }
//    }
//    val result:Int=max(100,20)
//    println(result)
//
//    println(max(100,20))


    /**
      *2. 递归方法
      * 旁边有个圈，表示递归的调用方式，自己调用自己
      * recursive表示递归的意思
      * 这个地方显式的指明返回值的类型就可以了
      * 递归方法要显式的声明函数的返回值的类型
      */
//    def fun(num :Int): Int ={
//      if(num==1){
//        //如果num=1,则直接返回1
//        1
//      }else{
//        num*fun(num-1)
//      }
//    }
//  println(fun(6))

    /**
      * 方法参数有默认值的方法
      */
//    def fun(a:Int=10,b:Int=20): Int ={
//      a+b
//    }
//    println(fun(200))
//    println(fun(b=300))     //方法有参数的默认值

    /**
      * 4.可边长参数的方法
      *
      * def fun(s:String*)代表有多个参数的可边长参数
      *
      * =>表示匿名函数
      *
      *
      */
//    def fun(s:String*)={
//      s.foreach(elem=>{
//        println(elem)
//      })
//      println(s)
//      //遍历打印出来
//      for(elem<-s){
//        print(elem+" ")
//      }

//    }
//    fun("Hello","b","c","a")
  /**
    * 5.匿名函数
    * ()=>{}
    *
    *使用下划线的方式来代替可边长参数中的每个元素
    * 没有指定值的参数，f:String=>U
    * 表示进来的是String类型，出去的是U类型
    * 匿名函数经常在方法内部使用，不给出函数的名称
    * (Int,Int)=>Int 是从2个int值计算出一个int值
    *
    *   “=>”就是匿名函数，多用于方法参数是函数式，常用匿名函数
    */
//    def fun:(Int,Int)=>Int=(a:Int,b:Int)=>{
//      a+b
//    }
//    println(fun(10,30))
//
//   val fun1= (s:String)=>{
//      println(s)
//    }
//
//    fun1("hello")


//    def fun(s:String*): Unit ={
//      s.foreach(elem=>{
//        println(elem)
//      })
//    }

//    def fun=(a:Int,b:Int)=>{
//      a+b
//    }
//
//    println(fun(100,300))




//  def fun(s:String*): Unit ={
//    s.foreach(println)
////    s.foreach(println(_))
////    s.foreach(elem=>{
////      print(elem+" ")
////    })
//  }
//  fun("Hello","b","c","a")


    /**
      * 6.嵌套的方法
      */
//    def fun(num:Int)={
//      def fun1(a:Int):Int={
//        if(a==1){
//          1
//        }else{
//          a*fun1(a-1)
//        }
//      }
//      fun1(num)
//    }
//  println(fun(5))
    /**
      * 7.偏应用函数
      *   某些情况下，方法参数非常多，调用这个方法非常频繁，每次调用只有固定的某个 参数的变化，其他的都不变
      *   可以定义偏应用来进行实现
      *
      *
       */
//    def showLog(date:Date,log:String)={
//      println(s"date is $date ,log is $log")
//    }
//    val date = new Date()
//    showLog(date,"aaa")
//    showLog(date,"bbb")
//    showLog(date,"ccc")
//
//    def fun=showLog(date,_:String)
//    fun("aaa")
//    fun("bbb")
//    fun("ccc")

    /**
      * 8.高阶函数
      * 1).方法的参数时候函数
      * 2)方法的返回值是函数  必须要显式的写出方法返回值的类型
      * 3)方法的参数和返回都是函数
      */
    //1.方法的参数势函数
//    def fun(a:Int,b:Int): Int ={
//      a+b
//    }
//    //这里的f是外部传入进来的参数
//    def fun1(f:(Int,Int)=>Int,s:String):String={
//      val i =f(100,200)
//      i+"#"+s
//    }
//
////    val result = fun1(fun,"hello scala")
////    println(result)
//
//    val result = fun1((a:Int,b:Int)=>{a*b},"scala")
//    println(result)



    //2.方法的返回是函数,如下所示的，返回一个函数类型
//    def fun(a:Int,b:Int):Int={
//      a+b
//    }
//
//    def fun1(f:(Int,Int)=>Int,s:String): String ={
//      val i :Int=f(100,200)
//      i+"#"+s
//    }
//    val result = fun1((a:Int,b:Int)=>{a*b},"scala")
//    println(result)

    //方法的返回值是函数  函数的最后一行当做值来进行返回
//    def fun(s:String):(String,String)=>String={
//      def fun1(s1:String,s2:String): String ={
//        s1+"~"+s2+"#"+s
//      }
//      fun1
//    }
//    println(fun("a")("b","c"))

    /**
      * 方法的参数和返回值都是函数
      */

  //方法的参数和返回值都是函数
  def fun(f:(Int,Int)=>Int): (String,String)=>String ={
    val i :Int=f(1,2)
    def fun1(s1:String,s2:String):String={
      s1+"@"+s2+"*"+i
    }
    fun1
  }
  println(fun((a:Int,b:Int)=>{a+b})("hello","world"))


  }
}
